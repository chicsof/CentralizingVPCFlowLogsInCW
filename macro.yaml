AWSTemplateFormatVersion: 2010-09-09
Resources:
  TransformAccountVPCLogsCFMacroRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: 
              - sts:AssumeRole 
      Path: /
      Policies:
        - PolicyName: lambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: [ 'logs:*' ]
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: orginazations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - organizations:List*
                Resource: '*'
  macroStringTransformLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const organizations = new AWS.Organizations();          
          const insertAccount = (bucket, account) => `arn:aws:s3:::${bucket}/AWSLogs/${account}/*`;
          exports.handler = async (event, context) => {
              console.log(JSON.stringify(event)); 
              const bucketName = event.params.bucketName;
              const accounts = event.params.accountList;
              accounts.forEach((e, i) => {
                  if (e.trim() === "") {
                      console.log(`Removed: "${e}"`)
                      accounts.shift(i, 1)
                  }
              })
              if(accounts.length == 0 ){
                  console.log("no accounts provided looking for orginizational accounts")
                  const orgData = await organizations.listAccounts().promise();
                  orgData.Accounts.forEach((a) => accounts.push(a.Id));
              }
              console.log('list of accounts', accounts);
              const accountsTransformed = accounts.map(a => insertAccount(bucketName, a));
              console.log('accounts transformed', accountsTransformed);
              return { requestId: event.requestId, status: 'success', fragment: accountsTransformed };             
          };   
      Handler: index.handler
      Runtime: nodejs10.x
      Role: !GetAtt TransformAccountVPCLogsCFMacroRole.Arn
      Description: A macro to transform a list of accounts for VPC Flow Logs access to S3 bucket
  transformAccountVPCLogsCFMacroPermissions:
    DependsOn: macroStringTransformLambda
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt macroStringTransformLambda.Arn
      Principal: cloudformation.amazonaws.com
  Transform:
    DependsOn: macroStringTransformLambda
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: macroStringTransform
      Description: Transform a list of accounts for VPC Flow Logs access to S3 bucket
      FunctionName: !GetAtt macroStringTransformLambda.Arn